name: 🔍 Inspección Pasiva de Gateway

on:
  workflow_dispatch:
    inputs:
      dominio:
        description: "🌐 Dominio o IP para analizar"
        required: true
        type: string

jobs:
  inspeccion-pasiva:
    runs-on: ubuntu-latest

    steps:
      - name: 📁 Clonar Repositorio
        uses: actions/checkout@v4

      - name: 📦 Instalar Dependencias
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl whatweb
          npm install -g wappalyzer
          curl -sL https://github.com/projectdiscovery/httpx/releases/latest/download/httpx-linux-amd64 -o /usr/local/bin/httpx
          chmod +x /usr/local/bin/httpx

      - name: 📥 Crear archivo con el dominio objetivo
        run: |
          echo "${{ inputs.dominio }}" > objetivos.txt

      - name: 🔍 Ejecutar httpx
        run: |
          httpx -l objetivos.txt -title -tech-detect -tls-grab -json -no-color -silent > salida_httpx.json || echo "[]" > salida_httpx.json

      - name: 🔍 Ejecutar WhatWeb
        run: |
          whatweb "${{ inputs.dominio }}" > salida_whatweb.txt || echo "error" > salida_whatweb.txt

      - name: 🔍 Ejecutar Wappalyzer
        run: |
          wappalyzer "${{ inputs.dominio }}" -o salida_wappalyzer.json || echo "[]" > salida_wappalyzer.json

      - name: 🧠 Detectar tecnología con fallback
        id: detectar
        run: |
          tecnologia=$(jq -r '.[0].webserver // .[0].cdn_name // .[0].tls.issuer_cn // .[0].tls.subject_cn // empty' salida_httpx.json | head -n 1)
          if [ -z "$tecnologia" ]; then
            tecnologia=$(grep -oP '^\d+\s+\K\S+' salida_whatweb.txt | head -n 1)
          fi
          if [ -z "$tecnologia" ]; then
            tecnologia=$(jq -r '.[0].name' salida_wappalyzer.json 2>/dev/null | head -n 1)
          fi
          if [ -z "$tecnologia" ]; then
            tecnologia="desconocida"
          fi
          echo "💡 Tecnología detectada: $tecnologia"
          echo "tecnologia_detectada=$tecnologia" >> "$GITHUB_OUTPUT"

      - name: 📚 Consultar CVEs en CIRCL
        run: |
          tecnologia="${{ steps.detectar.outputs.tecnologia_detectada }}"
          echo "🔍 Buscando CVEs para: $tecnologia"
          curl -s "https://cve.circl.lu/api/search/$tecnologia" | jq '.' > salida_cves.json || echo "[]" > salida_cves.json

      - name: 📋 Checklist Final de Seguridad
        run: |
          json=$(cat salida_httpx.json)
          echo "### 🛡️ Checklist Final de Seguridad" > checklist.txt
          tecnologia="${{ steps.detectar.outputs.tecnologia_detectada }}"

          es_gateway=$(echo "$json" | grep -iE 'gateway|f5|fortinet|paloalto|checkpoint' && echo "✅" || echo "❌")
          pasa_por_gateway=$(echo "$json" | grep -iE 'x-forwarded-for|via|cdn|proxy' && echo "✅" || echo "❌")
          tiene_tls=$(echo "$json" | jq '.[0].tls' | grep -q 'tls_version' && echo "✅" || echo "❌")
          cve_count=$(jq 'length' salida_cves.json)

          echo "- 🌐 Tecnología detectada: $tecnologia" >> checklist.txt
          echo "- 🔐 ¿Es un Gateway de Seguridad?: $es_gateway" >> checklist.txt
          echo "- ➡️ ¿Pasa por Gateway de Seguridad?: $pasa_por_gateway" >> checklist.txt
          echo "- 🔓 ¿No pasa por Gateway de Seguridad?: $( [ "$pasa_por_gateway" = "❌" ] && echo "✅" || echo "❌")" >> checklist.txt
          echo "- 📄 ¿Tiene CVEs asociados?: $( [ "$cve_count" -gt 0 ] && echo "✅ ($cve_count encontrados)" || echo "❌")" >> checklist.txt
          echo "- 🔒 ¿Tiene TLS activo?: $tiene_tls" >> checklist.txt

          echo "✅ Análisis completo. Resultados abajo:"
          cat checklist.txt

      - name: 📦 Subir Resultados como Artefatos
        uses: actions/upload-artifact@v4
        with:
          name: resultados-inspecciongateway
          path: |
            salida_httpx.json
            salida_whatweb.txt
            salida_wappalyzer.json
            salida_cves.json
            checklist.txt
