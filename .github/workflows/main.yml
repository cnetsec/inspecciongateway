name: InspectorDeGateway

on:
  workflow_dispatch:
    inputs:
      objetivo:
        description: 'Dominio o IP a analizar (ej: juice-shop.herokuapp.com)'
        required: true
        type: string
      gemini:
        description: '¬øGenerar informe con Gemini?'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  escaneo:
    name: An√°lisis Pasivo de Superficie de Borde
    runs-on: ubuntu-latest

    steps:
      - name: üîÑ Checkout del repositorio
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Instalar herramientas necesarias
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget jq golang
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: üåê Fingerprint con httpx
        run: |
          echo "${{ inputs.objetivo }}" > objetivos.txt
          httpx -l objetivos.txt -title -tech-detect -tls-grab -json -no-color -silent > salida_httpx.json
          cat salida_httpx.json > logs_gatewayinspector.txt

      - name: üß† Extraer tecnolog√≠a y versi√≥n
        id: extraer
        run: |
          servidor=$(jq -r '.[0].server' salida_httpx.json)
          version_limpia=$(echo "$servidor" | grep -oP '[A-Za-z0-9\.-]+')
          echo "üí° Tecnolog√≠a detectada: $servidor"
          echo "versi√≥n=$version_limpia" >> $GITHUB_OUTPUT
          echo "$servidor" >> logs_gatewayinspector.txt

      - name: üõ°Ô∏è Consultar posibles CVEs en CIRCL
        run: |
          cve_url="https://cve.circl.lu/api/search/${{ steps.extraer.outputs.version }}"
          echo "üîç Consultando CVEs en: $cve_url"
          curl -s "$cve_url" | jq '.data[] | {id, summary}' >> logs_gatewayinspector.txt || echo "Sin CVEs encontrados." >> logs_gatewayinspector.txt

      - name: ‚úÖ Checklist de tecnolog√≠as detectadas
        run: |
          echo "### Checklist de Tecnolog√≠as Detectadas" >> logs_gatewayinspector.txt
          for item in waf ingress gateway tls nginx kubernetes apache modsecurity cloudflare haproxy envoy; do
            if grep -i "$item" salida_httpx.json; then
              echo "- $item: ‚úÖ" >> logs_gatewayinspector.txt
            else
              echo "- $item: ‚ùå" >> logs_gatewayinspector.txt
            fi
          done

      - name: ü§ñ Generar Informe con Gemini (Opcional)
        if: inputs.gemini == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "üß† Enviando logs para an√°lisis con Gemini..."
          LOGS=$(sed 's/\x1b\[[0-9;]*m//g' logs_gatewayinspector.txt)
          PROMPT="Eres un analista de ciberseguridad. A partir de los siguientes logs, genera un informe en formato Markdown con las siguientes secciones:
          1. **Resumen Ejecutivo**
          2. **Tecnolog√≠as Detectadas (con checklist ‚úÖ/‚ùå para WAF, Ingress, TLS, etc.)**
          3. **CVEs Potenciales encontradas v√≠a CIRCL**
          4. **Detalles T√©cnicos (TLS, headers, servidores, superficie de exposici√≥n)**
          5. **Recomendaciones de Seguridad**
          Logs:
          $LOGS"
          PAYLOAD=$(jq -n --arg prompt "$PROMPT" '{ "contents": [ { "parts": [ { "text": $prompt } ] } ] }')
          RESPUESTA=$(curl -s -X POST -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=$GEMINI_API_KEY")

          if echo "$RESPUESTA" | jq -e 'has("error")'; then
            echo "‚ùå Error al generar el informe con Gemini:"
            echo "$RESPUESTA" | jq .
            exit 1
          fi

          echo "--- üìÑ INFORME DE SEGURIDAD ---"
          echo "$RESPUESTA" | jq -r '.candidates[0].content.parts[0].text'
