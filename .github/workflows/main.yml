name: 🔍 Inspección Pasiva de Gateway

on:
  workflow_dispatch:
    inputs:
      objetivo:
        description: '🔗 URL o dominio a inspeccionar (ej: https://example.com)'
        required: true
        type: string
      gemini:
        description: '🤖 ¿Activar análisis con Gemini?'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  inspeccion-pasiva:
    runs-on: ubuntu-latest
    name: inspeccion-pasiva

    steps:
      - name: 📥 Clonar Repositorio
        uses: actions/checkout@v4

      - name: ⚙️ Instalar dependencias necesarias
        run: |
          sudo apt update
          sudo apt install -y jq unzip curl whatweb
          curl -s https://api.github.com/repos/projectdiscovery/httpx/releases/latest \
            | jq -r '.assets[] | select(.name | test("linux_amd64")) | .browser_download_url' \
            | xargs curl -L -o httpx.tar.gz
          tar -xzf httpx.tar.gz
          sudo mv httpx /usr/local/bin/httpx

      - name: 🧾 Preparar objetivo
        run: echo "${{ inputs.objetivo }}" > objetivos.txt

      - name: 🌐 Ejecutar httpx con salida JSON
        run: |
          httpx -l objetivos.txt -title -tech-detect -tls-grab -json -no-color -silent > salida_httpx.json || echo "[]" > salida_httpx.json

      - name: 🧠 Análisis WhatWeb
        run: |
          whatweb -a 3 -v "${{ inputs.objetivo }}" > salida_whatweb.txt || echo "" > salida_whatweb.txt

      - name: 🧠 Análisis por encabezados y certificado TLS
        run: |
          tecnologia=$(jq -r '.[0].tech' salida_httpx.json | tr -d '[]"' | tr ',' '\n' | head -n 1)
          version=$(jq -r '.[0].webserver' salida_httpx.json)
          subject_cn=$(jq -r '.[0].tls.subject_cn' salida_httpx.json)
          issuer_cn=$(jq -r '.[0].tls.issuer_cn' salida_httpx.json)
          headers=$(jq -r '.[0].response_headers | to_entries[] | "\(.key): \(.value)"' salida_httpx.json)

          echo "💡 Tecnología principal detectada: ${tecnologia}" | tee logs_gatewayinspector.txt
          echo "🔖 Versión del servidor web: ${version}" | tee -a logs_gatewayinspector.txt
          echo "🔐 Certificado TLS CN: ${subject_cn}" | tee -a logs_gatewayinspector.txt
          echo "🛡️ Emitido por: ${issuer_cn}" | tee -a logs_gatewayinspector.txt
          echo "📋 Encabezados HTTP:" | tee -a logs_gatewayinspector.txt
          echo "${headers}" | tee -a logs_gatewayinspector.txt

          echo "${tecnologia}" > tecnologia_detectada.txt
          echo "${version}" > version_detectada.txt

      - name: 🔍 Consultar CVEs usando CIRCL
        run: |
          tecnologia=$(cat tecnologia_detectada.txt)
          version=$(cat version_detectada.txt)

          if [ "$tecnologia" != "null" ] && [ "$tecnologia" != "" ]; then
            echo "🔍 Consultando CVEs en: https://cve.circl.lu/api/search/${tecnologia}/${version}" | tee -a logs_gatewayinspector.txt
            curl -s "https://cve.circl.lu/api/search/${tecnologia}/${version}" | jq '.' > cves.json || echo "{}" > cves.json
          else
            echo "❌ Tecnología no identificada. No se consultarán CVEs." | tee -a logs_gatewayinspector.txt
            echo "{}" > cves.json
          fi

      - name: ✅ Checklist final
        run: |
          echo "### Checklist de Tecnologías Detectadas" | tee -a logs_gatewayinspector.txt

          declare -a checks=("waf" "ingress" "gateway" "tls" "nginx" "kubernetes" "apache" "modsecurity" "cloudflare" "haproxy" "envoy" "fortinet" "checkpoint" "aws" "f5" "paloalto")
          for tech in "${checks[@]}"; do
            if grep -iq "$tech" logs_gatewayinspector.txt || grep -iq "$tech" salida_whatweb.txt; then
              echo "- $tech: ✅" | tee -a logs_gatewayinspector.txt
            else
              echo "- $tech: ❌" | tee -a logs_gatewayinspector.txt
            fi
          done

      - name: 📝 Mostrar resultados finales
        run: |
          echo "📝 Resultado del Análisis:"
          cat logs_gatewayinspector.txt
