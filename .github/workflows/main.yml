name: 🔍 Inspección Pasiva de Gateway

on:
  workflow_dispatch:
    inputs:
      dominio:
        description: '🌐 Dominio objetivo'
        required: true
        type: string

jobs:
  inspeccion-pasiva:
    runs-on: ubuntu-latest

    steps:
      - name: 🚥 Preparar entorno
        run: |
          sudo apt update
          sudo apt install -y whatweb jq curl unzip golang

      - name: 🔧 Instalar httpx via Go
        run: |
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          sudo mv ~/go/bin/httpx /usr/local/bin/

      - name: 📁 Criar arquivo de objetivos
        run: echo "${{ inputs.dominio }}" > objetivos.txt

      - name: 🌐 Executar httpx
        run: |
          httpx -l objetivos.txt -title -tech-detect -tls-grab -json -no-color -silent > salida_httpx.json || echo "[]" > salida_httpx.json

      - name: 🕵️ Executar whatweb
        run: |
          whatweb "${{ inputs.dominio }}" > salida_whatweb.txt || echo "error" > salida_whatweb.txt

      - name: 💡 Detectar tecnología (fallback)
        id: tecnologia
        run: |
          tecnologia=$(jq -r '.[0].webserver // .[0].cdn_name // .[0].tls.issuer_cn // .[0].tls.subject_cn // empty' salida_httpx.json | head -n 1)
          if [ -z "$tecnologia" ]; then tecnologia="desconocida"; fi
          echo "💡 Tecnología detectada: $tecnologia"
          echo "tec=$tecnologia" >> "$GITHUB_OUTPUT"

      - name: 🔍 Buscar CVEs na base CIRCL
        id: cves
        run: |
          tecnologia="${{ steps.tecnologia.outputs.tec }}"
          echo "🔍 Buscando CVEs para: $tecnologia"
          cve_result=$(curl -s "https://cve.circl.lu/api/search/$tecnologia" || echo "null")
          tem_cve="❌"
          if [[ "$cve_result" != "null" && "$cve_result" != "[]" && "$cve_result" != "{}" ]]; then
            tem_cve="✅"
          fi
          echo "has_cve=$tem_cve" >> "$GITHUB_OUTPUT"
          echo "$cve_result" > salida_cves.json

      - name: ✅ Checklist Final Inteligente
        run: |
          tecnologia="${{ steps.tecnologia.outputs.tec }}"
          tem_cve="${{ steps.cves.outputs.has_cve }}"
          passa_gateway="❌"
          tipo_gateway="❌"
          nao_passa_gateway="❌"
          tls="❌"

          if grep -q 'x-forwarded-for\|x-amz-apigateway' salida_whatweb.txt; then
            passa_gateway="✅"
          fi

          if echo "$tecnologia" | grep -iE 'gateway|ingress|nginx|haproxy|envoy|cloudflare|akamai|api|modsecurity|aws|forti|check|f5|paloalto'; then
            tipo_gateway="✅"
          fi

          if [[ "$passa_gateway" == "❌" && "$tipo_gateway" == "❌" ]]; then
            nao_passa_gateway="✅"
          fi

          if grep -q 'tls' salida_httpx.json; then
            tls="✅"
          fi

          echo "### 🛡️ Checklist Final de Seguridad" > logs_gatewayinspector.txt
          echo "- 🌐 Tecnología detectada: $tecnologia" >> logs_gatewayinspector.txt
          echo "- 🔐 ¿Es un Gateway de Seguridad?: $tipo_gateway" >> logs_gatewayinspector.txt
          echo "- ➡️ ¿Pasa por Gateway de Seguridad?: $passa_gateway" >> logs_gatewayinspector.txt
          echo "- 🔓 ¿No pasa por Gateway de Seguridad?: $nao_passa_gateway" >> logs_gatewayinspector.txt
          echo "- 📄 ¿Tiene CVEs asociados?: $tem_cve" >> logs_gatewayinspector.txt
          echo "- 🔒 ¿Tiene TLS activo?: $tls" >> logs_gatewayinspector.txt
          cat logs_gatewayinspector.txt

      - name: 📦 Salvar artefatos
        uses: actions/upload-artifact@v4
        with:
          name: resultados-inspecciongateway
          path: |
            salida_httpx.json
            salida_whatweb.txt
            salida_cves.json
            logs_gatewayinspector.txt
