name: Inspeccion Gateway

on:
  workflow_dispatch:
    inputs:
      dominio:
        description: '🌐 Dominio o IP a analizar (ej: juice-shop.herokuapp.com)'
        required: true
        type: string
      gemini:
        description: '¿Desea generar un informe con la IA de Gemini?'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  scan:
    name: Análisis de Seguridad y Informe con IA
    runs-on: ubuntu-latest

    steps:
      - name: 🔄 Checkout del código
        uses: actions/checkout@v4

      - name: 🛠️ Instalar herramientas necesarias
        run: |
          set -e
          set -o pipefail

          echo "🔄 Actualizando e instalando dependencias del sistema..."
          sudo apt-get update -y || echo "⚠️ Advertencia: No se pudo actualizar la lista de paquetes."
          sudo apt-get install -y jq unzip curl whatweb wafw00f nmap || { echo "❌ Error crítico: No se pudieron instalar las dependencias principales."; exit 1; }
          
          # Instalación robusta de httpx con reintentos
          echo "📥 Descargando e instalando httpx..."
          MAX_RETRIES=5
          RETRY_DELAY=5
          DOWNLOAD_URL=""
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Intento $i de $MAX_RETRIES para descargar httpx..."
            # Intenta obtener la URL de descarga. Se añade '|| echo "{}"' para asegurar que jq reciba un JSON válido (aunque vacío) en caso de fallo de curl.
            TEMP_JSON_RESPONSE=$(curl -s https://api.github.com/repos/projectdiscovery/httpx/releases/latest || echo "{}")
            DOWNLOAD_URL=$(echo "$TEMP_JSON_RESPONSE" | jq -r '.assets[] | select(.name | test("httpx_.*_linux_amd64.zip")) | .browser_download_url' 2>/dev/null || echo "") # Asegura que DOWNLOAD_URL esté vacía si jq falla
            
            if [ -n "$DOWNLOAD_URL" ]; then # Verifica si la URL fue encontrada y no está vacía
              echo "URL de descarga de httpx encontrada: $DOWNLOAD_URL"
              # Intenta descargar el archivo. Si la descarga falla, el bucle continúa.
              if curl -L -o httpx.zip "$DOWNLOAD_URL"; then
                break # Sale del bucle si la descarga es exitosa
              else
                echo "⚠️ Advertencia: Falló la descarga de httpx.zip en el intento $i."
              fi
            else
              echo "⚠️ Advertencia: No se encontró la URL de descarga de httpx en el intento $i o la respuesta de la API fue inválida."
            fi
            sleep $RETRY_DELAY
          done

          if [ ! -f httpx.zip ]; then
            echo "❌ Error crítico: No se pudo descargar httpx.zip después de $MAX_RETRIES intentos."
            exit 1
          fi

          unzip -o httpx.zip || { echo "❌ Error: No se pudo descomprimir httpx.zip."; exit 1; }
          chmod +x httpx || { echo "❌ Error: No se pudo dar permisos de ejecución a httpx."; exit 1; }
          sudo mv httpx /usr/local/bin/httpx || { echo "❌ Error: No se pudo mover httpx al PATH."; exit 1; }
          rm httpx.zip

          touch gateinspector_raw_logs.txt || true 

      - name: 🌐 Ejecutar HTTPX
        run: |
          set -o pipefail
          echo "🧪 Ejecutando HTTPX en ${{ inputs.dominio }}..."
          httpx -silent -title -tls-probe -status-code -tech-detect -ip -location -web-server -cdn -json -u ${{ inputs.dominio }} | tee httpx_output.json >> gateinspector_raw_logs.txt || echo "Error al ejecutar HTTPX." >> gateinspector_raw_logs.txt
          echo "---" >> gateinspector_raw_logs.txt

      - name: 🌐 Ejecutar WhatWeb
        run: |
          set -o pipefail
          echo "🧪 Ejecutando WhatWeb en ${{ inputs.dominio }}..."
          whatweb -v ${{ inputs.dominio }} | tee whatweb_output.txt >> gateinspector_raw_logs.txt || echo "Error o objetivo inaccesible para WhatWeb." >> gateinspector_raw_logs.txt
          echo "---" >> gateinspector_raw_logs.txt

      - name: 🛡️ Detectar Firewall de Aplicación (Wafw00f)
        run: |
          set -o pipefail
          echo "🛡️ Ejecutando Wafw00f en ${{ inputs.dominio }}..."
          wafw00f ${{ inputs.dominio }} | tee wafw00f_output.txt >> gateinspector_raw_logs.txt || echo "Ningún WAF detectado o error con Wafw00f." >> gateinspector_raw_logs.txt
          echo "---" >> gateinspector_raw_logs.txt

      - name: 📡 Escaneo de Puertos (Nmap)
        run: |
          set -o pipefail
          echo "📡 Ejecutando Nmap (80, 443) en ${{ inputs.dominio }}..."
          nmap -Pn -p 80,443 ${{ inputs.dominio }} | tee nmap_output.txt >> gateinspector_raw_logs.txt || echo "Error en el escaneo de puertos con Nmap." >> gateinspector_raw_logs.txt
          echo "---" >> gateinspector_raw_logs.txt

      - name: 📄 Analizar Cabeceras y Certificado SSL
        id: analyze_certs 
        run: |
          echo "🔐 Obteniendo Cabeceras HTTP/S..."
          curl -s -D - https://${{ inputs.dominio }} -o /dev/null | tee headers_output.txt >> gateinspector_raw_logs.txt || echo "Error al obtener cabeceras HTTP/S." >> gateinspector_raw_logs.txt
          echo "---" >> gateinspector_raw_logs.txt
          
          echo "📜 Obteniendo Certificado SSL/TLS..."
          touch cert_output.txt
          echo | openssl s_client -servername ${{ inputs.dominio }} -connect ${{ inputs.dominio }}:443 -timeout 5 2>/dev/null | openssl x509 -noout -text > cert_output.txt || echo "Error al ejecutar OpenSSL para el certificado." >> gateinspector_raw_logs.txt
          
          if [ ! -s "cert_output.txt" ]; then 
            echo "⚠️ No se pudo obtener el certificado SSL para ${{ inputs.dominio }} o el archivo está vacío." >> gateinspector_raw_logs.txt
          fi
          echo "---" >> gateinspector_raw_logs.txt

      - name: 📝 Resumen detallado del Certificado SSL
        id: cert_summary
        if: success() && steps.analyze_certs.outcome == 'success' && hashFiles('cert_output.txt') != ''
        run: |
          echo "📋 Resumen del Certificado SSL:" >> gateinspector_raw_logs.txt
          CERT_FILE="cert_output.txt"
          CERT_EXPIRATION_STATUS="Desconocido"

          if [ -s "$CERT_FILE" ]; then 
            ISSUER=$(grep -A 1 "Issuer:" "$CERT_FILE" | tail -n 1 | sed 's/^[[:space:]]*//' || echo "N/A")
            SUBJECT=$(grep -A 1 "Subject:" "$CERT_FILE" | tail -n 1 | sed 's/^[[:space:]]*//' || echo "N/A")
            NOT_BEFORE=$(grep "Not Before" "$CERT_FILE" | sed 's/^[[:space:]]*Not Before: //'|| echo "N/A")
            NOT_AFTER=$(grep "Not After" "$CERT_FILE" | sed 's/^[[:space:]]*Not After : //'|| echo "N/A")
            
            SANS=$(grep -A 10 "X509v3 Subject Alternative Name:" "$CERT_FILE" | grep "DNS:" | sed 's/^[[:space:]]*DNS://g' | paste -sd ", " - || echo "No encontrados o no aplicables")
            
            echo "  ➡️ Emisor: $ISSUER" >> gateinspector_raw_logs.txt
            echo "  ➡️ Sujeto: $SUBJECT" >> gateinspector_raw_logs.txt
            echo "  ➡️ Válido desde: $NOT_BEFORE" >> gateinspector_raw_logs.txt
            echo "  ➡️ Válido hasta: $NOT_AFTER" >> gateinspector_raw_logs.txt
            echo "  ➡️ Nombres Alternativos del Sujeto (SANs): $SANS" >> gateinspector_raw_logs.txt

            if [ "$NOT_AFTER" != "N/A" ]; then
              NOT_AFTER_TIMESTAMP=$(date -d "$NOT_AFTER" +%s)
              CURRENT_TIMESTAMP=$(date +%s)
              DAYS_REMAINING=$(( (NOT_AFTER_TIMESTAMP - CURRENT_TIMESTAMP) / (60*60*24) ))

              if [ "$DAYS_REMAINING" -lt 0 ]; then
                CERT_EXPIRATION_STATUS="Expirado"
              elif [ "$DAYS_REMAINING" -le 30 ]; then
                CERT_EXPIRATION_STATUS="Próximo a expirar ($DAYS_REMAINING días restantes)"
              else
                CERT_EXPIRATION_STATUS="Válido"
              fi
            fi
            echo "  ➡️ Estado de Expiración: $CERT_EXPIRATION_STATUS" >> gateinspector_raw_logs.txt
            echo "cert_expiration_status=$CERT_EXPIRATION_STATUS" >> $GITHUB_OUTPUT
          else
            echo "  ⚠️ No se pudo obtener o analizar el certificado en detalle (archivo vacío o no existente)." >> gateinspector_raw_logs.txt
            echo "cert_expiration_status=No obtenido/Error" >> $GITHUB_OUTPUT
          fi
          echo "---" >> gateinspector_raw_logs.txt

      - name: 🧠 Consolidar tecnologías y Datos para Informe
        id: consolidated_data
        run: |
          echo "🧩 Consolidando información para el informe y el checklist..." >> gateinspector_raw_logs.txt
          
          CLEAN_WHATWEB_OUTPUT=$(sed 's/\x1b\[[0-9;]*m//g' whatweb_output.txt 2>/dev/null)
          TECNOLOGIAS_WHATWEB=$(echo "$CLEAN_WHATWEB_OUTPUT" | \
            grep -oP '\[\s*\K[^\]]+' | \
            sed -E 's/\s*\[[^\]]+\]|\s*\([^\)]+\)//g; s/[0-9\.]+//g; s/\s*,\s*/,/g; s/^\s*|\s*$//g' | \
            tr ' ' ',' | tr -s ',' | sort -u | paste -sd "," - || echo "No se detectaron tecnologías específicas con WhatWeb.")
          
          echo "Tecnologías WhatWeb: $TECNOLOGIAS_WHATWEB" >> gateinspector_raw_logs.txt
          echo "tecnologias=$TECNOLOGIAS_WHATWEB" >> $GITHUB_OUTPUT

          WHATWEB_GW_MATCHES=$(cat whatweb_output.txt 2>/dev/null | grep -i -E 'cloudflare|akamai|imperva|fastly|aws|api gateway|nginx ingress|waf|f5|palo alto|checkpoint|fortigate|barracuda|citrix|netscaler|azure application gateway|google cloud armor|cloudfront|incapsula|sucuri|mod_security|nginx/waf' || true)
          HEADERS_GW_MATCHES=$(cat headers_output.txt 2>/dev/null | grep -i -E 'x-forwarded|via|cf-ray|akamai|x-amz|x-cdn|x-gw|x-proxy|server:.*(waf|proxy|gateway|nginx|cloudflare|f5|akamai)|pragma: no-cache|cache-control: no-cache|x-xss-protection|strict-transport-security|content-security-policy|x-frame-options' || true)
          
          if [ -n "$WHATWEB_GW_MATCHES" ] || [ -n "$HEADERS_GW_MATCHES" ]; then
            echo "Posible Gateway de seguridad detectado: Sí" >> gateinspector_raw_logs.txt
            echo "   (Detalles de WhatWeb: $WHATWEB_GW_MATCHES)" >> gateinspector_raw_logs.txt
            echo "   (Detalles de Headers: $HEADERS_GW_MATCHES)" >> gateinspector_raw_logs.txt
            echo "gateway_detected=true" >> $GITHUB_OUTPUT
          else
            echo "Posible Gateway de seguridad detectado: No" >> gateinspector_raw_logs.txt
            echo "gateway_detected=false" >> $GITHUB_OUTPUT
          fi

          echo "---" >> gateinspector_raw_logs.txt

      - name: 🐞 Buscar CVEs en CIRCL para tecnologías detectadas
        run: |
          echo "🔍 Buscando CVEs relacionados en la base de datos CIRCL..."
          > cve_resultados.txt 

          if [[ "${{ steps.consolidated_data.outputs.tecnologias }}" == "No se detectaron tecnologías específicas con WhatWeb." ]]; then
            echo "No se encontraron tecnologías específicas para buscar CVEs." >> cve_resultados.txt
          else
            IFS=',' read -ra TECNOS <<< "${{ steps.consolidated_data.outputs.tecnologias }}"
            for TEC in "${TECNOS[@]}"; do
              if [[ ${#TEC} -lt 3 ]]; then
                continue
              fi
              echo "🔎 Buscando CVEs para: **$TEC**" >> cve_resultados.txt
              curl -s -L -f "https://cve.circl.lu/api/search/$TEC" | \
                jq -r '.[] | select(.id != null) | "**\(.id)**: \(.summary)"' >> cve_resultados.txt || echo "Error al consultar CVEs para $TEC." >> cve_resultados.txt
              echo "---" >> cve_resultados.txt
            done
          fi
          cat cve_resultados.txt
          echo "---"

      - name: 🤖 Generar Informe con Gemini (Opcional)
        id: generate_gemini_report
        if: inputs.gemini == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          set -e
          set -o pipefail
          echo "🧠 Consolidando resultados y generando informe con Gemini..."

          if [ ! -s gateinspector_raw_logs.txt ]; then
            echo "❌ Archivo de log 'gateinspector_raw_logs.txt' no encontrado o vacío. No se puede generar el informe de Gemini."
            echo "gemini_report_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          LOG_CONTENT=$(sed 's/\x1b\[[0-9;]*m//g' gateinspector_raw_logs.txt)

          # --- PROMPT PARA EL GEMINI ---
          PROMPT_TEXT="Eres un experto en ciberseguridad y pentester. Analiza los siguientes logs brutos generados por las herramientas HTTPX, WhatWeb, Wafw00f, Nmap, y curl (para cabeceras y certificados SSL) para el objetivo '${{ inputs.dominio }}'. Crea un informe claro y conciso en formato Markdown.

          El informe debe contener las siguientes secciones:

          ## 0. Resumen Rápido (Checklist):
          Basado en tu análisis de los logs brutos, genera un checklist conciso con el formato 'Emoji Descripción del punto'. Utiliza ✅ para positivo/seguro, ❌ para negativo/inseguro, ⚠️ para atención/aviso (e.g., CVEs, certificado expirando), y ❓ para desconocido/error.
          Asegúrate de que las descripciones de los puntos sean **idénticas** a las siguientes y que los emojis estén a la izquierda:
          - ✅ El objetivo es un Gateway de Seguridad (WAF, Ingress, CDN, etc.)
          - ✅ El tráfico pasa por un Gateway/Proxy
          - ✅ Tecnología detectada
          - ✅ Certificado SSL/TLS válido y vigente
          - ⚠️ CVEs encontrados para tecnologías detectadas (revisar)

          ## 1. Resumen Ejecutivo:
          Un párrafo conciso con las principales conclusiones de la inspección pasiva, destacando si se detectó un gateway de seguridad o WAF y la salud general del objetivo.
          ## 2. Información General del Objetivo:
          * **Dominio/IP:** ${{ inputs.dominio }}
          * **Tecnologías Identificadas (HTTPX, WhatWeb):** Enumera las tecnologías detectadas, incluyendo versiones si están disponibles.
          * **Servidor Web:** (Si se detecta)
          * **CDN/WAF Detectado (Wafw00f, Cabeceras):** Indica si se detectó un WAF o CDN, y cuál.
          * **Puertos Abiertos (Nmap):** Lista los puertos 80 y 443 y su estado.
          ## 3. Análisis de Certificado SSL/TLS:
          * **Emisor:**
          * **Sujeto:**
          * **Validez (Desde/Hasta):**
          * **Nombres Alternativos (SANs):**
          * **Estado de Expiración:** (Válido, próximo a expirar, expirado, no obtenido)
          ## 4. Análisis de Cabeceras HTTP/S:
          * **Cabeceras de Seguridad Clave:** (X-XSS-Protection, Strict-Transport-Security, Content-Security-Policy, X-Frame-Options, X-Content-Type-Options) y su estado (presente/ausente, valor).
          * **Cabeceras de Información (Server, X-Powered-By):** Si se detectan, con sus valores.
          * **Cabeceras de Proxy/CDN (X-Forwarded-For, Via, CF-Ray, etc.):** Indica si se detectan y si sugieren un paso por gateway.
          ## 5. Vulnerabilidades Potenciales y Riesgos (Basado en CVEs y Tecnologías):
          * Basado en las tecnologías identificadas, lista posibles vectores de ataque o CVEs conocidas que podrían ser explotadas. Sé específico (ej: 'La versión X de Nginx es vulnerable a Y'). Considera si el WAF/Gateway es vulnerable o si está mal configurado.
          * Analiza si la ausencia de cabeceras de seguridad clave representa un riesgo.
          ## 6. Recomendaciones y Próximos Pasos:
          Sugiere los próximos 3 a 5 pasos para profundizar el análisis de seguridad y mejorar la postura de seguridad del objetivo.

          Aquí están los logs brutos completos de todas las herramientas. Analízalos cuidadosamente para extraer toda la información relevante y generar el informe según el formato solicitado.
          "
          # --- FIN DEL PROMPT ---

          (
            echo '{ "contents": [ { "parts": [ { "text": "'
            echo "$PROMPT_TEXT" | sed 's/\\/\\\\/g; s/"/\\"/g'
            echo ""
            cat gateinspector_raw_logs.txt | sed 's/\\/\\\\/g; s/"/\\"/g; s/\x1b\[[0-9;]*m//g'
            echo '" } ] } ] }'
          ) | curl -s -X POST -H "Content-Type: application/json" \
            -d @- \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=$GEMINI_API_KEY" > gemini_api_response.json || { echo "❌ Error: Falló la llamada a la API de Gemini."; echo "gemini_report_status=failed" >> $GITHUB_OUTPUT; exit 1; }

          RESPONSE=$(cat gemini_api_response.json)

          if echo "$RESPONSE" | jq -e 'has("error")' > /dev/null; then
            echo "❌ La API de Gemini retornó un error:"
            echo "$RESPONSE" | jq .
            echo "gemini_report_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if ! echo "$RESPONSE" | jq -e '.candidates[0].content.parts[0].text' > /dev/null; then
            echo "❌ La API de Gemini no retornó un análisis válido (puede haber sido bloqueado por seguridad o respuesta inesperada)."
            echo "Respuesta recibida:"
            echo "$RESPONSE" | jq .
            echo "gemini_report_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "--- INFORME GENERADO POR INSPECCION GATEWAY (VIA GEMINI AI) ---"
          echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text' > gemini_report.md
          cat gemini_report.md
          echo "---------------------------------------------------------"
          rm gemini_api_response.json

      - name: ✅ Conclusión Final del Análisis
        run: |
          echo "---"
          echo "✨ **CONCLUSIÓN FINAL DEL ANÁLISIS DE INSPECCIÓN GATEWAY** ✨"
          echo "---"

          if [[ "${{ inputs.gemini }}" == "true" && "${{ steps.generate_gemini_report.outputs.gemini_report_status }}" == "success" && -s "gemini_report.md" ]]; then
            echo "✅ **¡Análisis Completo y Potenciado por Gemini AI!**"
            echo "El informe detallado generado por la inteligencia artificial de Gemini proporciona una visión profunda y recomendaciones específicas."
            echo "Por favor, revise el informe a continuación o descargue 'gemini_report.md' de los artefactos del workflow."
            echo ""
            echo "--- INFORME DETALLADO DE GEMINI ---"
            cat gemini_report.md || echo "Error al mostrar el informe de Gemini."
            echo "--- FIN DEL INFORME DETALLADO ---"
          else
            echo "➡️ **Análisis Basado en Herramientas Estándar.**"
            echo "El informe de Gemini no fue solicitado o no pudo ser generado. La siguiente es una tabla resumen de los hallazgos."
            echo "Para un análisis más profundo, considere activar la opción 'Gemini' en la próxima ejecución."
            echo ""
            echo "📋 **Resumen de Hallazgos (Checklist Estándar):**"
            echo "Dominio: **${{ inputs.dominio }}**"
            echo "---"
            
            # Formato: "Emoji Descripción del punto"
            # Usamos printf para un control de espaciado más preciso.

            # 1. ¿El objetivo es un Gateway de Seguridad (WAF, API Gateway, Ingress, Firewall, Load Balancer)?
            if [[ "${{ steps.consolidated_data.outputs.gateway_detected }}" == "true" ]]; then
              printf "%s %s\n" "✅" "El objetivo es un Gateway de Seguridad (WAF, Ingress, CDN, etc.)"
            else
              printf "%s %s\n" "❌" "El objetivo NO es un Gateway de Seguridad aparente"
            fi

            # 2. ¿El tráfico pasa por un Gateway (X-Forwarded-For, Via, etc.)?
            if cat headers_output.txt 2>/dev/null | grep -i -E 'x-forwarded|via|x-amz|x-cdn|x-gw|x-proxy'; then
              printf "%s %s\n" "✅" "El tráfico pasa por un Gateway/Proxy"
            else
              printf "%s %s\n" "❌" "El tráfico NO pasa por un Gateway/Proxy aparente"
            fi

            # 3. ¿Tecnología detectada?
            if [[ "${{ steps.consolidated_data.outputs.tecnologias }}" == "No se detectaron tecnologías específicas con WhatWeb." ]]; then
              printf "%s %s\n" "❌" "Ninguna tecnología específica detectada (WhatWeb limitado)"
            else
              printf "%s %s\n" "✅" "Tecnología detectada"
            fi
            
            # 4. ¿Certificado SSL/TLS válido y vigente?
            if [[ "${{ steps.cert_summary.outputs.cert_expiration_status }}" == "Válido" ]]; then
              printf "%s %s\n" "✅" "Certificado SSL/TLS válido y vigente"
            elif [[ "${{ steps.cert_summary.outputs.cert_expiration_status }}" == "Próximo a expirar"* ]]; then
              printf "%s %s\n" "⚠️" "Certificado SSL/TLS próximo a expirar"
            elif [[ "${{ steps.cert_summary.outputs.cert_expiration_status }}" == "Expirado" ]]; then
              printf "%s %s\n" "❌" "Certificado SSL/TLS expirado"
            else
              printf "%s %s\n" "❓" "Estado del Certificado SSL/TLS desconocido/error"
            fi

            # 5. ¿CVEs encontrados para tecnologías detectadas?
            if [ -s "cve_resultados.txt" ] && grep -q "CVE-" cve_resultados.txt; then
              printf "%s %s\n" "⚠️" "CVEs encontrados para tecnologías detectadas (revisar)"
            else
              printf "%s %s\n" "✅" "Ningún CVE relevante encontrado"
            fi
            echo "---"
            echo "💡 **Consideraciones de Seguridad (Análisis Estándar):**"
            echo "La presencia de un Gateway de Seguridad y el paso del tráfico a través de él son indicadores clave de una postura de seguridad perimetral. La ausencia de estos elementos o la detección de CVEs requiere una investigación y mitigación inmediatas. Un certificado expirado o próximo a expirar también es un riesgo crítico."
            echo "---"
          fi
          echo "--- FIN DEL ANÁLISIS ---"

      - name: ⬆️ Subir Artefactos de Análisis
        uses: actions/upload-artifact@v4
        with:
          name: inspeccion-gateway-results-${{ github.run_id }}
          path: |
            httpx_output.json
            whatweb_output.txt
            wafw00f_output.txt
            nmap_output.txt
            headers_output.txt
            cert_output.txt
            cve_resultados.txt
            gateinspector_raw_logs.txt
            gemini_report.md
          if-no-files-found: ignore
